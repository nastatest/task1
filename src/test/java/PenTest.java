import org.testng.annotations.BeforeTest;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.Optional;

import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.TestNGAntTask.Mode.testng;

public class PenTest {

    @Test(dataProvider = "defaultData")
    public void Constructor1(int ink, double size, String color) {
        Pen pen = new Pen(ink);
        assertNotEquals (pen, 0);
    }

    @Test(dataProvider = "defaultData")
    public void Constructor2(int ink, double size, String color) {
        Pen pen = new Pen(ink, size);
        assertNotEquals (pen, 0);
    }

    @Test(dataProvider = "defaultData")
    public void Constructor3(int ink, double size, String color) {
        Pen pen = new Pen(ink, size, color);
        assertNotEquals (pen, 0);
    }

    @DataProvider
    public Object[][] getColorData() {
        return new Object[][]{
                {10, 1.0, "RED", "RED", "BLUE"},
                {10, 1.0, "1", "1", "BLUE"},
                {10, 1.0, "", "", "BLUE"},
                {10, 1.0, " ", " ", "BLUE"},
                {10, 1.0, "?", "?", "BLUE"}
        };
    }

    @Test(dataProvider = "getColorData")
    public void getColorConstr1(int ink, double size, String color, String result, String defaultResult) {
        Pen pen = new Pen(ink);
        assertEquals (pen.getColor(), defaultResult);
    }

    @Test(dataProvider = "getColorData")
    public void getColorConstr2(int ink, double size, String color, String result, String defaultResult) {
        Pen pen = new Pen(ink, size);
        assertEquals (pen.getColor(), defaultResult);
    }

    @Test(dataProvider = "getColorData")
    public void getColorConstr3(int ink, double size, String color, String result, String defaultResult) {
        Pen pen = new Pen(ink, size, color);
        assertEquals (pen.getColor(), result);
    }

    @DataProvider
    public Object[][] isWorkData() {
        return new Object[][]{
                {5, 1.0, "GREEN", true},
                {1, 1.0, "GREEN", true},
                {0, 1.0, "GREEN", false},
                {-1, 1.0, "GREEN", false}
        };
    }

    @Test(dataProvider = "isWorkData")
    public void isWorkConstr1(int ink, double size, String color, Boolean result) {
        Pen pen = new Pen(ink);
        assertEquals (pen.isWork(), result);
    }

    @Test(dataProvider = "isWorkData")
    public void isWorkConstr2(int ink, double size, String color, Boolean result) {
        Pen pen = new Pen(ink, size);
        assertEquals (pen.isWork(), result);
    }

    @Test(dataProvider = "isWorkData")
    public void isWorkConstr3(int ink, double size, String color, Boolean result) {
        Pen pen = new Pen(ink, size, color);
        assertEquals (pen.isWork(), result);
    }

    @DataProvider
    public Object[][] defaultData() {
        return new Object[][]{
                {10, 1.0, "GREEN"}
        };
    }

    @Test(dataProvider = "defaultData")
    public void doSmthElse(int ink, double size, String color) {
        final ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.setOut(new PrintStream(output));
        Pen pen = new Pen(ink);
        pen.doSomethingElse();
        assertNotEquals(output.toString(), "");
    }

    @DataProvider
    public Object[][] writeData() {
        return new Object[][]{
                {100, 2.0, "a", "a"},
                {20, 2.0, "12345", "12345"},
                {50, 1.0, "", ""},
                {83, 0.5, "o!?", "o!?"},
                {30, 3.0, "AaAa", "AaAa"},
                {5, 1.0, "a b c d", "a b c d"},
                {5, 1.0, "      a", "      a"},
                {10, 1.0, "abcdeAbcde", "abcdeAbcde"},
                {10, 2.0, "abcdeAbcde", "abcde"},
                {10, 3.0, "abcdeAbcde", "abc"},
                {10, 3.0, "ab cd e", "ab c"},
                {1, 0.1, "abcdeAbcdeA", "abcdeAbcde"},
                {10, 10.1, "Abc", ""},
                {1, 0.3, "12345", "123"},
                {1, 0.99, "12", "1"},
                {-5, 1.0, "111", ""},
                {5, -1.0, "222", ""}
        };
    }

    @Test(dataProvider = "writeData")
    public void write(int ink, double size, String word, String result) {
        Pen pen = new Pen(ink, size);
        assertEquals(pen.write(word), result);
    }

    @DataProvider
    public Object[][] isWorkAfterWriteData() {
        return new Object[][]{
                {1, 1.0, "a", false},
                {1, 0.5, "a", true},
                {1, 1.1, "a", true},
                {1, 2.0, "a", true},
                {5, 1.0, "a1", true},
                {5, 1.1, "a1", true},
                {10, 1.1, "123456789", true},
                {1, 1.0, "aaa", false},
                {-1, 2.0, "a", false},
                {5, 1.0, "     ", true}
        };
    }

    @Test(dataProvider = "isWorkAfterWriteData")
        public void isWorkAfterWrite(int ink, double size, String word, Boolean result) {
            Pen pen = new Pen(ink, size);
            pen.write(word);
            assertEquals(pen.isWork(), result);
        }
}
